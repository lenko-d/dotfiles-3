" PATHOGEN
execute pathogen#infect()

" GENERAL
set nocompatible            " get rid of Vi compatibility mode. SET FIRST!
filetype plugin indent on   " filetype detection[ON] plugin[ON] indent[ON]
syntax enable               " enable syntax highlighting (previously syntax on).

if !has("gui_running")
  let g:gruvbox_italic=0
endif

" COLORS
set t_Co=256
colorscheme Tomorrow-Night
set background=dark

" SOME SUBTLE COLOR CUSTOMIZATIONS
highlight SignColumn ctermbg=none     " no color for gutter
highlight Visual ctermbg=238
highlight VertSplit ctermfg=240 ctermbg=238

" NAVIGATION
set scrolloff=3             " some lines around scroll for context

" CURSOR/LINE
set number
set colorcolumn=80          " ruler at 80 chars width
set cursorline              " highlight the current line

" STATUS/HISTORY
set history=200             " remember a lot of stuff
set ruler                   " Always show info along bottom.

" STATUS LINE

hi User1 ctermfg=240 guifg=#777777 ctermbg=236 guibg=#333333
hi User2 ctermfg=11 guifg=#FFFF00 ctermbg=236 guibg=#333333
hi User3 ctermfg=245 guifg=#555555 ctermbg=236 guibg=#333333

set laststatus=2
set statusline=
set statusline +=%1*\ %<%F%*  "full path
set statusline +=%2*\ %m%*    "modified flag
set statusline +=%1*%=%*      "separator
set statusline +=%3*%=%4l%*   "current line
set statusline +=%1*:%*       "separator
set statusline +=%3*%02v\ %*    "virtual column number

" FILES
set autoread                " auto-reload files changed on disk
set updatecount=0           " disable swap files

" SEARCH
set hlsearch                " highlight all results
set incsearch               " but do highlight as you type your search.
set ignorecase              " make searches case-insensitive...
set smartcase               " ... unless they contain at least one capital letter
set gdefault                " have :s///g flag by default on"

" INDENTATION
set cindent
set autoindent              " auto-indent
set tabstop=2               " tab spacing
set softtabstop=2           " unify
set shiftwidth=2            " indent/outdent by 2 columns
set shiftround              " always indent/outdent to the nearest tabstop
set expandtab               " use spaces instead of tabs
set smarttab                " use tabs at the start of a line, spaces elsewhere

" TABS
nmap <silent> tt :tabnew<CR>
nmap <silent> [g :tabprevious<CR>
nmap <silent> ]g :tabnext<CR>
nmap <silent> [G :tabrewind<CR>
nmap <silent> ]G :tablast<CR>

" VIMDIFF
set diffopt=filler,vertical

" CONCEAL (DISABLED BY DEFAULT)
set conceallevel=0
highlight Conceal guibg=#333333 guifg=#b294bb gui=bold

autocmd FileType make setlocal noexpandtab
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4
au BufNewFile,BufRead *.ejs set filetype=html

set nowrap                  " don't wrap text
set cmdheight=1
set ttyfast

let mapleader = ','

" Reset search with ,n
noremap <Leader>n :noh<CR>

" Disable arrow keys
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" NEOCOMPLCACHE

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
" Let completefunc be overridable
let g:neocomplcache_force_overwrite_completefunc = 1

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" <TAB>: completion.
 inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" HASKELL SETUP

" Use GHC functionality for haskell source files
"au Bufenter *.hs compiler ghc
"let g:haddock_browser = "/usr/bin/google-chrome"
"let g:ghc = "/usr/local/bin/ghc"


" JAVASCRIPT SETUP

let javascript_enable_domhtmlcss = 1
let g:javascript_conceal = 1

" Syntax checking
let g:syntastic_javascript_checkers = ['jsxhint']
let g:syntastic_enable_signs=1
let g:syntastic_always_populate_loc_list=1

highlight SpellCap term=reverse ctermfg=yellow ctermbg=9 gui=undercurl guisp=#de935f

" Spell Checking Commands
command! EnableSpellCheck :set spell spelllang=en_us
command! DisableSpellCheck :set nospell

" Rainbow Parens
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Enable custom .vim.custom in directories
if filereadable(".vim.custom")
    so .vim.custom
endif

" DELIMIT MATE
let delimitMate_expand_cr=1

" Markdown syntax
au BufRead,BufNewFile *.md set filetype=markdown

au BufNewFile,BufRead *.zap set filetype=clojure

function! ReloadUserSystem()
  :Eval (if-let [v (resolve 'user/reset)] (@v) (.println *err* "Not a \"Reloaded\" workflow project. The function user/reset must be specified!"))
endfunction

" Add stuartsierra/component style key binding for reset.
autocmd FileType clojure nmap <Leader>ur :call ReloadUserSystem()<CR>

let g:slimv_disable_clojure=1

" ECLIM
let g:EclimCompletionMethod = 'omnifunc'
autocmd FileType java nnoremap <buffer> gd :JavaSearch<cr>
autocmd FileType java set tabstop=4
autocmd FileType java set softtabstop=4
autocmd FileType java set shiftwidth=4

" GOLANG
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1

" TYPE IMPLEMENTS
au FileType go nmap <Leader>ti <Plug>(go-implements)
" INFO
au FileType go nmap <Leader>i <Plug>(go-info)

" GODOC/GODOC VERTICAL
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
" GODOC BROWSER
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)

" GO RUN
au FileType go nmap <leader>r <Plug>(go-run)
" GO BUILD
au FileType go nmap <leader>b <Plug>(go-build)
" GO TEST
au FileType go nmap <leader>t <Plug>(go-test)
" GO COVERAGE
au FileType go nmap <leader>c <Plug>(go-coverage)

autocmd FileType javascript command! FmtJson %!jq -M .

let g:clang_c_options = '-std=c++1y'
let g:clang_cpp_options = '-std=c++1y -stdlib=libc++ -Wc++11-extensions'

au BufNewFile,BufRead *.purs set syntax=haskell
