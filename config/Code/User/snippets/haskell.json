{
	// Place your snippets for haskell here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Typeclass declaration": {
		"prefix": "class",
		"body": [
			"class ${1:TypeclassName} ${2:a} where",
			"  $3"
		],
		"description": "Create new typeclass"
	},
	"Typeclass instance declaration": {
		"prefix": "instance",
		"body": [
			"instance ${1:TypeclassName} ${2:Type} where",
			"  ${3:function} = ${4:undefined}"
		],
		"description": "Create typeclass instance"
	},
	"Case expression": {
		"prefix": "case",
		"body": [
			"case ${1:value} of",
			"  ${2:_} -> ${3:_}"
		],
		"description": "Create case expression"
	},
	"If-then-else expression": {
		"prefix": "if",
		"body": "if ${1:condition} then ${2:_} else ${3:_}",
		"description": "Create if-then-else expression"
	},
	"Language pragma": {
		"prefix": "lang",
		"body": "{-# LANGUAGE $1 #-}",
		"description": "Create GHC language pragma"
	},
	"Unqualified import": {
		"prefix": "import",
		"body": "import $1 ($2)",
		"description": "Add unqualified import"
	},
	"Qualified import": {
		"prefix": "importq",
		"body": "import qualified $1 as $2",
		"description": "Add qualified import"
	}
}